


Scaffold-DbContext "Server=dev;Database=EWS;user id=ateam_sql; password=Ateam.sql2019#; TrustServerCertificate=True;" Microsoft.EntityFrameworkCore.SqlServer -o Models -force -nopluralize



        eyJhbGciOiJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzA0L3htbGRzaWctbW9yZSNobWFjLXNoYTUxMiIsInR5cCI6IkpXVCJ9.eyJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL3dzLzIwMDgvMDYvaWRlbnRpdHkvY2xhaW1zL3JvbGUiOiJTdGFuZGFyZCBVc2VyIiwibmJmIjoxNjk1MTMzNjM0LCJleHAiOjE4NTI5ODY0MzQsImlzcyI6IkVXU0FwaSIsImF1ZCI6IkVXU0FwaSJ9.lwx7O1E7ejZdNdOAvdLvL185TrAl7ZoL_6ALC9cZ84cSOq4xVpuvMpvtIvqXhJxwRIYxGt_LiKnJUSDtrv8pgA
     



       [AllowAnonymous]
        [HttpGet("Token")]
        public string GenerateToken()
        {
            var securityKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_conf["Jwt:Key"]));
            var credential = new SigningCredentials(securityKey, SecurityAlgorithms.HmacSha512Signature);

            List<Claim> claims = new List<Claim> {
             new Claim(ClaimTypes.Role, "Standard User")
        };

            var token = new JwtSecurityToken(_conf["Jwt:Issuer"], _conf["Jwt:Audience"], claims: claims, notBefore: DateTime.Now, expires: DateTime.Now.AddYears(5), signingCredentials: credential);
            return new JwtSecurityTokenHandler().WriteToken(token);
        }